(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global['ts-object-path'] = {})));
}(this, (function (exports) { 'use strict';

var pathSymbol = Symbol('Object path');
function createProxy(path) {
    if (path === void 0) { path = []; }
    var proxy = new Proxy((_a = {}, _a[pathSymbol] = path, _a), {
        get: function (target, key) {
            if (key === pathSymbol) {
                return target[pathSymbol];
            }
            if (typeof key === 'string') {
                var intKey = parseInt(key, 10);
                if (key === intKey.toString()) {
                    key = intKey;
                }
            }
            return createProxy((path || []).concat([key]));
        }
    });
    return proxy;
    var _a;
}
function getPath(proxy) {
    if (typeof proxy === 'function') {
        proxy = proxy(createProxy());
    }
    return proxy[pathSymbol];
}
function isProxy(value) {
    return value && typeof value === 'object' && !!getPath(value);
}
function get(object, proxy, defaultValue) {
    if (defaultValue === void 0) { defaultValue = undefined; }
    return getPath(proxy).reduce(function (o, key) { return o && o[key] || defaultValue; }, object);
}
function set(object, proxy, value) {
    getPath(proxy).reduce(function (o, key, index, keys) {
        if (index < keys.length - 1) {
            o[key] = o[key] || (typeof keys[index + 1] === 'number' ? [] : {});
            return o[key];
        }
        o[key] = value;
    }, object);
}

exports.createProxy = createProxy;
exports.getPath = getPath;
exports.isProxy = isProxy;
exports.get = get;
exports.set = set;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ts-object-path.umd.js.map
