"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryBuilder = void 0;
var ts_object_path_1 = require("ts-object-path");
var types_1 = require("./types");
var QueryBuilder = /** @class */ (function () {
    function QueryBuilder(executor) {
        this.executor = executor;
        this.queries = [];
        this.orderByFields = new Set();
        this.extractWhereParam = function (param) {
            if (typeof param === 'string')
                return param;
            return ts_object_path_1.getPath(param).join('.');
        };
    }
    QueryBuilder.prototype.whereEqualTo = function (param, val) {
        this.queries.push({
            prop: this.extractWhereParam(param),
            val: val,
            operator: types_1.FirestoreOperators.equal,
        });
        return this;
    };
    QueryBuilder.prototype.whereNotEqualTo = function (param, val) {
        this.queries.push({
            prop: this.extractWhereParam(param),
            val: val,
            operator: types_1.FirestoreOperators.notEqual,
        });
        return this;
    };
    QueryBuilder.prototype.whereGreaterThan = function (prop, val) {
        this.queries.push({
            prop: this.extractWhereParam(prop),
            val: val,
            operator: types_1.FirestoreOperators.greaterThan,
        });
        return this;
    };
    QueryBuilder.prototype.whereGreaterOrEqualThan = function (prop, val) {
        this.queries.push({
            prop: this.extractWhereParam(prop),
            val: val,
            operator: types_1.FirestoreOperators.greaterThanEqual,
        });
        return this;
    };
    QueryBuilder.prototype.whereLessThan = function (prop, val) {
        this.queries.push({
            prop: this.extractWhereParam(prop),
            val: val,
            operator: types_1.FirestoreOperators.lessThan,
        });
        return this;
    };
    QueryBuilder.prototype.whereLessOrEqualThan = function (prop, val) {
        this.queries.push({
            prop: this.extractWhereParam(prop),
            val: val,
            operator: types_1.FirestoreOperators.lessThanEqual,
        });
        return this;
    };
    QueryBuilder.prototype.whereArrayContains = function (prop, val) {
        this.queries.push({
            prop: this.extractWhereParam(prop),
            val: val,
            operator: types_1.FirestoreOperators.arrayContains,
        });
        return this;
    };
    QueryBuilder.prototype.whereArrayContainsAny = function (prop, val) {
        if (val.length > 10) {
            throw new Error("\n        This query supports up to 10 values. You provided " + val.length + ".\n        For details please visit: https://firebase.google.com/docs/firestore/query-data/queries#in_not-in_and_array-contains-any\n      ");
        }
        this.queries.push({
            prop: this.extractWhereParam(prop),
            val: val,
            operator: types_1.FirestoreOperators.arrayContainsAny,
        });
        return this;
    };
    QueryBuilder.prototype.whereIn = function (prop, val) {
        if (val.length > 10) {
            throw new Error("\n        This query supports up to 10 values. You provided " + val.length + ".\n        For details please visit: https://firebase.google.com/docs/firestore/query-data/queries#in_not-in_and_array-contains-any\n      ");
        }
        this.queries.push({
            prop: this.extractWhereParam(prop),
            val: val,
            operator: types_1.FirestoreOperators.in,
        });
        return this;
    };
    QueryBuilder.prototype.whereNotIn = function (prop, val) {
        if (val.length > 10) {
            throw new Error("\n        This query supports up to 10 values. You provided " + val.length + ".\n        For details please visit: https://firebase.google.com/docs/firestore/query-data/queries#in_not-in_and_array-contains-any\n      ");
        }
        this.queries.push({
            prop: this.extractWhereParam(prop),
            val: val,
            operator: types_1.FirestoreOperators.notIn,
        });
        return this;
    };
    QueryBuilder.prototype.limit = function (limitVal) {
        if (this.limitVal) {
            throw new Error('A limit function cannot be called more than once in the same query expression');
        }
        this.limitVal = limitVal;
        return this;
    };
    QueryBuilder.prototype.orderByAscending = function (prop) {
        var fieldProp = typeof prop == 'string' ? prop : '';
        var alreadyOrderedByField = this.orderByFields.has(fieldProp);
        if (this.orderByObj && alreadyOrderedByField) {
            throw new Error('An orderBy function cannot be called more than once in the same query expression');
        }
        if (!alreadyOrderedByField && fieldProp) {
            this.orderByFields.add(fieldProp);
        }
        this.orderByObj = {
            fieldPath: this.extractWhereParam(prop),
            directionStr: 'asc',
        };
        return this;
    };
    QueryBuilder.prototype.orderByDescending = function (prop) {
        var fieldProp = typeof prop == 'string' ? prop : '';
        var alreadyOrderedByField = this.orderByFields.has(fieldProp);
        if (this.orderByObj && alreadyOrderedByField) {
            throw new Error('An orderBy function cannot be called more than once in the same query expression');
        }
        if (!alreadyOrderedByField && fieldProp) {
            this.orderByFields.add(fieldProp);
        }
        this.orderByObj = {
            fieldPath: this.extractWhereParam(prop),
            directionStr: 'desc',
        };
        return this;
    };
    QueryBuilder.prototype.find = function () {
        return this.executor.execute(this.queries, this.limitVal, this.orderByObj, false, this.customQueryFunction);
    };
    QueryBuilder.prototype.customQuery = function (func) {
        if (this.customQueryFunction) {
            throw new Error('Only one custom query can be used per query expression');
        }
        this.customQueryFunction = func;
        return this;
    };
    QueryBuilder.prototype.findOne = function () {
        return __awaiter(this, void 0, void 0, function () {
            var queryResult;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.executor.execute(this.queries, this.limitVal, this.orderByObj, true, this.customQueryFunction)];
                    case 1:
                        queryResult = _a.sent();
                        return [2 /*return*/, queryResult.length ? queryResult[0] : null];
                }
            });
        });
    };
    return QueryBuilder;
}());
exports.QueryBuilder = QueryBuilder;
//# sourceMappingURL=QueryBuilder.js.map